// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/unbeman/ya-prac-go-second-grade/internal/server/utils (interfaces: IJWT)

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/unbeman/ya-prac-go-second-grade/internal/server/model"
	utils "github.com/unbeman/ya-prac-go-second-grade/internal/server/utils"
)

// MockIJWT is a mock of IJWT interface.
type MockIJWT struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTMockRecorder
}

// MockIJWTMockRecorder is the mock recorder for MockIJWT.
type MockIJWTMockRecorder struct {
	mock *MockIJWT
}

// NewMockIJWT creates a new mock instance.
func NewMockIJWT(ctrl *gomock.Controller) *MockIJWT {
	mock := &MockIJWT{ctrl: ctrl}
	mock.recorder = &MockIJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWT) EXPECT() *MockIJWTMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIJWT) Generate(arg0 model.User, arg1 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIJWTMockRecorder) Generate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIJWT)(nil).Generate), arg0, arg1)
}

// Verify mocks base method.
func (m *MockIJWT) Verify(arg0 string) (*utils.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(*utils.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockIJWTMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIJWT)(nil).Verify), arg0)
}
